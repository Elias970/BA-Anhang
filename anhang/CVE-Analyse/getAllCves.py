'''
1. copy into cvelistv5
2. run python3 getAllCves.py with parameter 'search_word'
3. check output file
'''

import os
import json
import csv
import argparse

def search_cves(directory, years, search_word, output_file):
    # Define the CSV headers
    headers = ['CVE-ID', 'Ver√∂ffentlicht', 'Beschreibung', 'Schwere']
    
    with open(output_file, 'w', newline='', encoding='utf-8') as csvfile:
        csvwriter = csv.writer(csvfile, delimiter=';')
        csvwriter.writerow(headers)
        
        # Loop through the specified years
        for year in years:
            year_directory = os.path.join(directory, str(year))
            if not os.path.exists(year_directory):
                continue
            
            # search in all subdirectories and files in the year's directory
            for root, _, files in os.walk(year_directory):
                for filename in files:
                    if filename.endswith('.json'):
                        file_path = os.path.join(root, filename)
                        
                        # Read the JSON file
                        with open(file_path, 'r', encoding='utf-8') as jsonfile:
                            cve_data = json.load(jsonfile)
                            
                            # Check if the search word is in the descriptions
                            descriptions = cve_data.get('containers', {}).get('cna', {}).get('descriptions', [])
                            found = any(search_word.lower() in desc.get('value', '').lower() for desc in descriptions)
                            
                            if found:
                                # Extract relevant fields
                                cve_id = cve_data.get('cveMetadata', {}).get('cveId', 'N/A')
                                date_published = cve_data.get('cveMetadata', {}).get('datePublished', 'N/A')
                                description = descriptions[0].get('value', 'N/A') if descriptions else 'N/A'
                                
                                # Extract the baseScore
                                metrics = cve_data.get('containers', {}).get('cna', {}).get('metrics', [])
                                base_score = 'N/A'
                                if metrics:
                                    cvss = metrics[0].get('cvssV3_1', {})
                                    base_score = cvss.get('baseScore', 'N/A')
                                
                                # Write the row to the CSV file
                                csvwriter.writerow([cve_id, date_published, description, base_score])

def main():
    parser = argparse.ArgumentParser(description='Search CVEs for a specific keyword and save results to a CSV file.')
    parser.add_argument('search_word', type=str, help='The keyword to search for in the CVE descriptions.')
    args = parser.parse_args()
    
    # Define the path to the CVEs directory
    cves_directory = 'cves'
    # Define the years to search
    years_to_search = [2020, 2021, 2022, 2023, 2024]
    # Define the search word
    search_word = args.search_word
    # Define the output CSV file, linked to the search word
    output_csv_file = f'{search_word}_cves.csv'
    
    print("Wait until finished...")
    
    # Call the function
    search_cves(cves_directory, years_to_search, search_word, output_csv_file)
    
    print("Finished")

if __name__ == "__main__":
    main()
